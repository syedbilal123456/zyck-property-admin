generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id
  firstName       String
  lastName        String
  email           String
  avatarUrl       String?
  createdAt       DateTime        @default(now())
  isAdmin         Boolean         @default(false)
  ProfileComplete Boolean         @default(false)
  city            String?
  latitude        String?
  longitude       String?
  province        String?
  streetAddress   String?
  phoneNumber     String?
  isActive        Boolean         @default(true)
  password        String?
  Property        Property[]
  subscription    Subscriptions[]
}

model Property {
  id             Int                @id @default(autoincrement())
  name           String
  description    String
  price          Int
  userId         String
  typeId         Int
  statusId       Int
  DetailId       Int
  createdAt      DateTime           @default(now())
  StatusProperty StatusProperty     @default(ACCEPTED)
  contact        Contact?
  typeDetail     PropertyTypeDetail @relation(fields: [DetailId], references: [id])
  status         PropertyStatus     @relation(fields: [statusId], references: [id])
  type           PropertyType       @relation(fields: [typeId], references: [id])
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  feature        PropertyFeature?
  images         PropertyImage[]
  location       PropertyLocation?
}

model Contact {
  id         Int       @id @default(autoincrement())
  name       String
  phone      String
  email      String
  propertyId Int       @unique
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyImage {
  id         Int       @id @default(autoincrement())
  url        String
  propertyId Int
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyFeature {
  id              Int      @id @default(autoincrement())
  bedrooms        Int
  bathrooms       Int
  parkingSpots    Int
  area            Int
  hasSwimmingPool Boolean
  hasGardenYard   Boolean
  hasBalcony      Boolean
  propertyId      Int      @unique
  areaType        AreaType
  created         DateTime @default(now())
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyLocation {
  id            Int      @id @default(autoincrement())
  streetAddress String
  propertyId    Int      @unique
  cityId        Int
  stateId       Int
  createdAt     DateTime @default(now())
  city          City     @relation(fields: [cityId], references: [id])
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  state         State    @relation(fields: [stateId], references: [id])
}

model State {
  id               Int                @id @default(autoincrement())
  value            String
  created          DateTime           @default(now())
  cities           City[]
  PropertyLocation PropertyLocation[]
}

model City {
  id               Int                @id @default(autoincrement())
  value            String
  stateId          Int
  createdAt        DateTime?          @default(now()) @db.Timestamp(6)
  state            State              @relation(fields: [stateId], references: [id])
  PropertyLocation PropertyLocation[]
}

model PropertyType {
  id       Int                  @id @default(autoincrement())
  value    String
  created  DateTime             @default(now())
  Property Property[]
  Details  PropertyTypeDetail[]
}

model PropertyTypeDetail {
  id             Int          @id @default(autoincrement())
  value          String
  propertyTypeId Int
  created        DateTime     @default(now())
  Property       Property[]
  propertyType   PropertyType @relation(fields: [propertyTypeId], references: [id])
}

model PropertyStatus {
  id       Int        @id @default(autoincrement())
  value    String
  created  DateTime   @default(now())
  Property Property[]
}

model SubscriptionPlan {
  id                    Int             @id @default(autoincrement())
  name                  String
  price                 Float
  propertyLimit         Int
  ImagePerPropertyLimit Int
  features              String
  createdAt             DateTime?       @default(now()) @db.Timestamp(6)
  subscription          Subscriptions[]
}

model Subscriptions {
  id        Int              @id @default(autoincrement())
  paymentId String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  planId    Int
  userId    String
  plan      SubscriptionPlan @relation(fields: [planId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
}

enum AreaType {
  SQUARE_METER
  SQUARE_FEET
  SQUARE_YARD
  MARLA
  KANAL
}

enum StatusProperty {
  PENDING
  ACCEPTED
  REJECTED
}
